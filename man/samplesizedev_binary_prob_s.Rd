% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/samplesizedev_binary_prob_s.R
\name{samplesizedev_binary_prob_s}
\alias{samplesizedev_binary_prob_s}
\title{Sample size required to develop a risk prediction model for binary outcomes}
\usage{
samplesizedev_binary_prob_s(
  S1,
  S2,
  P_S1S2,
  p,
  c,
  n.predictors,
  beta = rep(1/n.predictors, n.predictors),
  nval = 25000,
  nsim = 1000,
  parallel = TRUE
)
}
\arguments{
\item{S1}{(numeric) The lower bound for the calibration slope}

\item{S2}{(numeric) The upper bound for the expected calibration slope}

\item{P_S1S2}{(numeric) The probability of acceptable calibration}

\item{p}{(numeric) The anticipated outcome prevalence}

\item{c}{(numeric) The anticipated C-statistic}

\item{n.predictors}{(numeric) The number of candidate predictor variables}

\item{nval}{(numeric) Size of validation data (at least 10000 )}

\item{nsim}{(numeric) The number of simulations (at least 500, default value 1000 to ensure small simulation error)}

\item{parallel}{(logical) parallel processing to speed up computations (default=TRUE)}
}
\value{
n: the required sample size
}
\description{
This function calculates the sample size required to achieve an expected Calibration Slope (S), given anticipated features of the data and the model
(outcome prevalence, C-statistic and number of predictors).

It takes approximately one minute to run. Ideally it should be followed by checking also
the Mean Absolute Prediction Error that corresponds to the calculated sample size.
}
\examples{
# Find the sample size required for an average calibration slope of S = 0.9
# samplesizedev_binary(S = 0.9, p = 0.2, c = 0.85, n.predictors = 10,  nsim = 500, parallel = FALSE)

# Prefer parallel computing with >2 cores that ensure faster running
# samplesizedev_binary(S = 0.9, p = 0.2, c = 0.85, n.predictors = 10,  nsim = 1000, parallel = TRUE)

# Check the expected MAPE and Calibration Slope for the selected size
# expected_cs_mape_binary(n = 530, p = 0.2, c = 0.85, n.predictors = 10, nsim = 1000, parallel = TRUE)



}
\seealso{
expected_performance
}
